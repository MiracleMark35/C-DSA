```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 100

typedef struct{
	int elems[MAX];
	int count;
}List;

void initListV1(List*);
List initListV2(void);

void insertLast(List*, int);
void insertFirst(List*, int);
void insertSorted(List*, int);

void deleteLast(List*);
void deleteFirst(List*);
void deleteElem(List*, int);

int findElem(List, int);

void displayList(List);

int main(void)
{
	List listNum;
	initListV1(&listNum);
	int i;
	for(i = 10; i > 0; i--){
		insertSorted(&listNum, i);
	}
	displayList(listNum);

   deleteElem(&listNum, 6);
    displayList(listNum);

	return 0;
}

void initListV1(List* L)
{
    L->count = 0;
}


void insertLast(List* L, int data)
{
    if(L->count < MAX){
        L->elems[L->count] = data;
        L->count++;
    }
}

void deleteLast(List* L)
{
	if (L->count > 0){
	    L->count--;
	}
}

int findElem(List L, int data)
{
	int i;
	for(i = 0; i < L.count && L.elems[i] != data; i++);
	return i < L.count ? i : -1;  
}

void displayList(List L)
{
	int i;
	
	for(i = 0; i < L.count; i++){
		printf("L[%d]: %d\n", i, L.elems[i]);
	}
		printf("\n");
	
}

void insertFirst(List* L, int data){
    
    if(L->count < MAX){
        
        for(int i = L->count; i > 0; i--){
            L->elems[i] = L->elems[i - 1];
        }
        
        L->elems[0] = data;
        L->count++;
    }
}

void deleteFirst(List* L){
    
    if(L->count > 0){
        for(int i = 0; i < L->count - 1; i++){
            L->elems[i] = L->elems[i + 1];
        }
        
        L->count--;
    }
}

void deleteElem(List* L, int data){
    
    int pos = findElem(*L, data);
    
    if(pos != -1){
      for(int i = pos; i < L->count - 1; i++){
          L->elems[i] = L->elems[i + 1];
      }
      L->count--;
    }
}

void insertSorted(List* L, int data){
    if(L->count < MAX){
        int pos = 0;

        // find position to insert
        while(pos < L->count && L->elems[pos] < data){
            pos++;
        }

        // shift elements to the right
        for(int i = L->count; i > pos; i--){
            L->elems[i] = L->elems[i - 1];
        }

        // insert at found position
        L->elems[pos] = data;
        L->count++;
    }
}
```

